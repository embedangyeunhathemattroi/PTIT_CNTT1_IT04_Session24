// ================================
// QU·∫¢N L√ù L·ªöP H·ªåC N√ÇNG CAO
// ================================

class Student {
    constructor(
        public id: number,
        public name: string,
        public grade: number = 0
    ) {}
}

class Teacher {
    constructor(
        public id: number,
        public name: string,
        public subject: string
    ) {}
}

class Classroom {
    public students: Student[] = [];
    public teacher?: Teacher;

    constructor(public name: string) {}

    addStudent(student: Student) {
        this.students.push(student);
        console.log(`‚úÖ ƒê√£ th√™m h·ªçc sinh ${student.name} v√†o l·ªõp ${this.name}`);
    }

    removeStudent(studentId: number) {
        const idx = this.students.findIndex(s => s.id === studentId);
        if (idx >= 0) {
            const removed = this.students.splice(idx, 1)[0];
            console.log(`üóëÔ∏è ƒê√£ x√≥a h·ªçc sinh ${removed.name}`);
        } else console.log("‚ùå Kh√¥ng t√¨m th·∫•y h·ªçc sinh.");
    }

    assignTeacher(teacher: Teacher) {
        this.teacher = teacher;
        console.log(`üìö Gi√°o vi√™n ${teacher.name} ƒë∆∞·ª£c ph√¢n c√¥ng cho l·ªõp ${this.name}`);
    }

    removeTeacher() {
        if (this.teacher) {
            console.log(`üóëÔ∏è H·ªßy ph√¢n c√¥ng gi√°o vi√™n ${this.teacher.name}`);
            this.teacher = undefined;
        } else console.log("‚ö†Ô∏è L·ªõp ch∆∞a c√≥ gi√°o vi√™n.");
    }

    updateGrade(studentId: number, grade: number) {
        const s = this.students.find(st => st.id === studentId);
        if (s) {
            s.grade = grade;
            console.log(`‚úÖ C·∫≠p nh·∫≠t ƒëi·ªÉm ${grade} cho ${s.name}`);
        } else console.log("‚ùå Kh√¥ng t√¨m th·∫•y h·ªçc sinh.");
    }

    findStudentByName(name: string) {
        const found = this.students.filter(s => s.name.toLowerCase().includes(name.toLowerCase()));
        if (found.length > 0) {
            console.log("üîç K·∫øt qu·∫£ t√¨m ki·∫øm theo t√™n:");
            found.forEach(s => console.log(`- ID=${s.id} | ${s.name} (ƒêi·ªÉm: ${s.grade})`));
        } else console.log("‚ùå Kh√¥ng t√¨m th·∫•y h·ªçc sinh.");
    }

    findStudentByGrade(min: number, max: number) {
        const found = this.students.filter(s => s.grade >= min && s.grade <= max);
        if (found.length > 0) {
            console.log(`üîç H·ªçc sinh c√≥ ƒëi·ªÉm t·ª´ ${min} ƒë·∫øn ${max}:`);
            found.forEach(s => console.log(`- ID=${s.id} | ${s.name} (ƒêi·ªÉm: ${s.grade})`));
        } else console.log("‚ùå Kh√¥ng c√≥ h·ªçc sinh trong kho·∫£ng ƒëi·ªÉm n√†y.");
    }

    stats() {
        if (this.students.length === 0) {
            console.log("‚ö†Ô∏è L·ªõp ch∆∞a c√≥ h·ªçc sinh.");
            return;
        }
        const avg = this.students.reduce((sum, s) => sum + s.grade, 0) / this.students.length;
        const above8 = this.students.filter(s => s.grade >= 8).length;
        const below5 = this.students.filter(s => s.grade < 5).length;
        const maxGrade = Math.max(...this.students.map(s => s.grade));
        const minGrade = Math.min(...this.students.map(s => s.grade));
        console.log(`üìä Th·ªëng k√™ l·ªõp ${this.name}:`);
        console.log(`- ƒêi·ªÉm trung b√¨nh: ${avg.toFixed(2)}`);
        console.log(`- H·ªçc sinh >=8 ƒëi·ªÉm: ${above8}`);
        console.log(`- H·ªçc sinh <5 ƒëi·ªÉm: ${below5}`);
        console.log(`- ƒêi·ªÉm cao nh·∫•t: ${maxGrade}`);
        console.log(`- ƒêi·ªÉm th·∫•p nh·∫•t: ${minGrade}`);
    }

    sortByGrade(desc: boolean = false) {
        this.students.sort((a, b) => desc ? b.grade - a.grade : a.grade - b.grade);
        console.log(`‚úÖ Danh s√°ch h·ªçc sinh ƒë√£ s·∫Øp x·∫øp theo ƒëi·ªÉm ${desc ? "gi·∫£m d·∫ßn" : "tƒÉng d·∫ßn"}`);
        this.showInfo();
    }

    showInfo() {
        console.log(`===== Th√¥ng tin l·ªõp ${this.name} =====`);
        console.log(`Gi√°o vi√™n: ${this.teacher ? `${this.teacher.name} (${this.teacher.subject})` : "Ch∆∞a c√≥"}`);
        if (this.students.length === 0) console.log("L·ªõp ch∆∞a c√≥ h·ªçc sinh.");
        else this.students.forEach(s => console.log(`- ID=${s.id} | ${s.name} (ƒêi·ªÉm: ${s.grade})`));
    }
}

// ================================
// H·ªÜ TH·ªêNG QU·∫¢N L√ù NHI·ªÄU L·ªöP
// ================================
const classrooms: Classroom[] = [];
let studentIdCounter = 1;
let teacherIdCounter = 1;

while (true) {
    const choice = prompt(
`===== MENU QU·∫¢N L√ù L·ªöP H·ªåC N√ÇNG CAO =====
1. Th√™m l·ªõp m·ªõi
2. Th√™m h·ªçc sinh
3. X√≥a h·ªçc sinh
4. G√°n gi√°o vi√™n
5. H·ªßy ph√¢n c√¥ng gi√°o vi√™n
6. C·∫≠p nh·∫≠t ƒëi·ªÉm h·ªçc sinh
7. T√¨m h·ªçc sinh theo t√™n
8. T√¨m h·ªçc sinh theo kho·∫£ng ƒëi·ªÉm
9. Th·ªëng k√™ l·ªõp
10. S·∫Øp x·∫øp h·ªçc sinh theo ƒëi·ªÉm
11. Hi·ªÉn th·ªã th√¥ng tin l·ªõp
12. Tho√°t
Ch·ªçn:`
    );
    if (!choice) break;

    switch (choice) {
        case "1": {
            const name = prompt("T√™n l·ªõp m·ªõi:")!;
            classrooms.push(new Classroom(name));
            console.log(`‚úÖ ƒê√£ th√™m l·ªõp ${name}`);
            break;
        }
        case "2": {
            if (classrooms.length === 0) { console.log("‚ö†Ô∏è Ch∆∞a c√≥ l·ªõp n√†o."); break; }
            const clsName = prompt("Nh·∫≠p t√™n l·ªõp mu·ªën th√™m h·ªçc sinh:")!;
            const cls = classrooms.find(c => c.name === clsName);
            if (!cls) { console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp."); break; }
            const n = parseInt(prompt("S·ªë h·ªçc sinh mu·ªën th√™m:")!);
            for (let i = 0; i < n; i++) {
                const name = prompt(`T√™n h·ªçc sinh #${i+1}:`)!;
                const grade = parseFloat(prompt("ƒêi·ªÉm:")!);
                if (isNaN(grade) || grade < 0 || grade > 10) { console.log("‚ùå ƒêi·ªÉm kh√¥ng h·ª£p l·ªá."); continue; }
                cls.addStudent(new Student(studentIdCounter++, name, grade));
            }
            break;
        }
        case "3": {
            const clsName = prompt("T√™n l·ªõp mu·ªën x√≥a h·ªçc sinh:")!;
            const cls = classrooms.find(c => c.name === clsName);
            if (!cls) { console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp."); break; }
            const id = parseInt(prompt("ID h·ªçc sinh c·∫ßn x√≥a:")!);
            cls.removeStudent(id);
            break;
        }
        case "4": {
            if (classrooms.length === 0) { console.log("‚ö†Ô∏è Ch∆∞a c√≥ l·ªõp n√†o."); break; }
            const clsName = prompt("T√™n l·ªõp mu·ªën ph√¢n c√¥ng gi√°o vi√™n:")!;
            const cls = classrooms.find(c => c.name === clsName);
            if (!cls) { console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp."); break; }
            const name = prompt("T√™n gi√°o vi√™n:")!;
            const subject = prompt("M√¥n d·∫°y:")!;
            cls.assignTeacher(new Teacher(teacherIdCounter++, name, subject));
            break;
        }
        case "5": {
            const clsName = prompt("T√™n l·ªõp mu·ªën h·ªßy gi√°o vi√™n:")!;
            const cls = classrooms.find(c => c.name === clsName);
            if (!cls) { console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp."); break; }
            cls.removeTeacher();
            break;
        }
        case "6": {
            const clsName = prompt("T√™n l·ªõp:")!;
            const cls = classrooms.find(c => c.name === clsName);
            if (!cls) { console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp."); break; }
            const id = parseInt(prompt("ID h·ªçc sinh:")!);
            const grade = parseFloat(prompt("ƒêi·ªÉm m·ªõi:")!);
            if (isNaN(grade) || grade < 0 || grade > 10) { console.log("‚ùå ƒêi·ªÉm kh√¥ng h·ª£p l·ªá."); break; }
            cls.updateGrade(id, grade);
            break;
        }
        case "7": {
            const clsName = prompt("T√™n l·ªõp:")!;
            const cls = classrooms.find(c => c.name === clsName);
            if (!cls) { console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp."); break; }
            const name = prompt("T√™n h·ªçc sinh c·∫ßn t√¨m:")!;
            cls.findStudentByName(name);
            break;
        }
        case "8": {
            const clsName = prompt("T√™n l·ªõp:")!;
            const cls = classrooms.find(c => c.name === clsName);
            if (!cls) { console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp."); break; }
            const min = parseFloat(prompt("ƒêi·ªÉm min:")!);
            const max = parseFloat(prompt("ƒêi·ªÉm max:")!);
            cls.findStudentByGrade(min, max);
            break;
        }
        case "9": {
            const clsName = prompt("T√™n l·ªõp mu·ªën th·ªëng k√™:")!;
            const cls = classrooms.find(c => c.name === clsName);
            if (!cls) { console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp."); break; }
            cls.stats();
            break;
        }
        case "10": {
            const clsName = prompt("T√™n l·ªõp mu·ªën s·∫Øp x·∫øp:")!;
            const cls = classrooms.find(c => c.name === clsName);
            if (!cls) { console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp."); break; }
            const desc = prompt("S·∫Øp x·∫øp gi·∫£m d·∫ßn? (y/n):") === "y";
            cls.sortByGrade(desc);
            break;
        }
        case "11": {
            const clsName = prompt("T√™n l·ªõp mu·ªën hi·ªÉn th·ªã:")!;
            const cls = classrooms.find(c => c.name === clsName);
            if (!cls) { console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp."); break; }
            cls.showInfo();
            break;
        }
        case "12": {
            alert("‚úÖ Tho√°t ch∆∞∆°ng tr√¨nh");
            break;
        }
        default: console.log("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá");
    }
    if(choice === "12") break;
}
