/******************************************************
 * H·ªÜ TH·ªêNG NG√ÇN H√ÄNG H·ª¢P NH·∫§T (ƒê·ªÅ 1 ‚Üí 8)
 * - User/Admin (login, ban)
 * - T√†i kho·∫£n: Saving / Checking
 * - L·ªãch s·ª≠ giao d·ªãch, th√¥ng b√°o
 * - T√≠nh l√£i
 * - Gi·ªõi h·∫°n giao d·ªãch trong ng√†y
 * - Li√™n k·∫øt User ‚Üî Nhi·ªÅu t√†i kho·∫£n
 ******************************************************/
/* =========================
   ƒê·ªÄ 2: UserAccount & Admin
   =========================*/
class UserAccount {
    constructor(id, userName, password, status = "active", role = "user") {
        this.id = id;
        this.userName = userName;
        this.password = password;
        this.isLogin = false;
        this.role = role;
        this.status = status;
    }
    // ƒêƒÉng nh·∫≠p: ch·ªâ cho ph√©p n·∫øu ch∆∞a b·ªã kh√≥a v√† m·∫≠t kh·∫©u ƒë√∫ng
    login(password) {
        if (this.status === "banned") {
            console.log(`‚ùå T√†i kho·∫£n ${this.userName} ƒë√£ b·ªã kh√≥a.`);
            return;
        }
        if (this.password === password) {
            this.isLogin = true;
            console.log(`‚úÖ ${this.userName} ƒëƒÉng nh·∫≠p th√†nh c√¥ng.`);
        }
        else {
            console.log("‚ùå Sai m·∫≠t kh·∫©u.");
        }
    }
    // ƒêƒÉng xu·∫•t
    logout() {
        if (this.isLogin) {
            this.isLogin = false;
            console.log(`üëã ${this.userName} ƒë√£ ƒëƒÉng xu·∫•t.`);
        }
    }
}
class AdminAccount extends UserAccount {
    constructor(id, userName, password) {
        super(id, userName, password, "active", "admin");
    }
    // Kh√≥a 1 user
    banUser(user) {
        user.status = "banned";
        console.log(`‚õî Admin ${this.userName} ƒë√£ kh√≥a ng∆∞·ªùi d√πng ${user.userName}.`);
    }
}
/* ==========================================
   ƒê·ªÄ 3 (n·ªÅn t·∫£ng) + ƒê·ªÄ 6 + ƒê·ªÄ 8: T√†i kho·∫£n g·ªëc
   - L·ªãch s·ª≠ giao d·ªãch
   - Th√¥ng b√°o
   - Gi·ªõi h·∫°n giao d·ªãch trong ng√†y
   ==========================================*/
class TransactionAccount {
    constructor(accountNumber, dailyLimit) {
        this.accountNumber = accountNumber;
        this.balance = 0;
        this.history = [];
        this.notifications = [];
        this.dailyLimit = dailyLimit;
        this.dailyTotal = 0;
        this.lastTransactionDate = new Date().toDateString();
    }
    /* --------- Helpers v·ªÅ gi·ªõi h·∫°n ng√†y ---------- */
    resetDailyIfNewDay() {
        const today = new Date().toDateString();
        if (today !== this.lastTransactionDate) {
            this.dailyTotal = 0;
            this.lastTransactionDate = today;
        }
    }
    canTransactToday(amount) {
        this.resetDailyIfNewDay();
        if (this.dailyLimit == null)
            return true;
        if (this.dailyTotal + amount > this.dailyLimit) {
            const msg = `V∆∞·ª£t gi·ªõi h·∫°n ng√†y (${this.dailyLimit}) v·ªõi giao d·ªãch ${amount}.`;
            console.log(`‚ö†Ô∏è ${msg}`);
            this.notifications.push(`‚ö†Ô∏è ${msg}`);
            return false;
        }
        return true;
    }
    addToDailyTotal(amount) {
        this.dailyTotal += amount;
    }
    /* ------------- Giao d·ªãch c∆° b·∫£n -------------- */
    deposit(amount) {
        if (amount <= 0) {
            console.log("‚ùå S·ªë ti·ªÅn n·∫°p ph·∫£i > 0.");
            return;
        }
        if (!this.canTransactToday(amount))
            return;
        this.balance += amount;
        const entry = `Deposit: +${amount}, Balance: ${this.balance}`;
        this.history.push(entry);
        this.notifications.push(`üì© N·∫°p ${amount} th√†nh c√¥ng.`);
        console.log(`üí∞ ${entry}`);
        this.addToDailyTotal(amount);
    }
    /* ------------- Ti·ªán √≠ch hi·ªÉn th·ªã -------------- */
    showHistoryDetailed() {
        console.log(`\nüìú L·ªãch s·ª≠ giao d·ªãch [${this.accountNumber}]:`);
        this.history.forEach((entry, idx) => {
            console.log(`${idx + 1}. ${entry} - @${new Date().toLocaleString()}`);
        });
    }
    showNotifications() {
        console.log(`\nüîî Th√¥ng b√°o [${this.accountNumber}]:`);
        if (this.notifications.length === 0) {
            console.log("(Kh√¥ng c√≥ th√¥ng b√°o)");
            return;
        }
        this.notifications.forEach((n) => console.log(n));
    }
    getBalance() {
        return this.balance;
    }
    getLastReport() {
        console.log(`\nüßæ B√°o c√°o nhanh [${this.accountNumber}] - S·ªë d∆∞ hi·ªán t·∫°i: ${this.balance}`);
    }
}
/* ==========================================
   ƒê·ªÄ 1 + ƒê·ªÄ 4: SavingAccount (c√≥ l√£i su·∫•t)
   - Kh√¥ng cho √¢m: cho r√∫t ƒë·∫øn 0
   ==========================================*/
class SavingAccount extends TransactionAccount {
    constructor(accountNumber, interestRate, dailyLimit) {
        super(accountNumber, dailyLimit);
        this.interestRate = interestRate;
    }
    withdraw(amount) {
        if (amount <= 0) {
            console.log("‚ùå S·ªë ti·ªÅn r√∫t ph·∫£i > 0.");
            return;
        }
        if (!this.canTransactToday(amount))
            return;
        if (amount <= this.getBalance()) {
            const newBalance = this.getBalance() - amount;
            // C·∫≠p nh·∫≠t balance qua "hack" nh·∫π v√¨ balance l√† protected ·ªü l·ªõp cha
            this.balance = newBalance;
            const entry = `Withdraw: -${amount}, Balance: ${newBalance}`;
            this.history.push(entry);
            this.notifications.push(`üì© R√∫t ${amount} th√†nh c√¥ng.`);
            console.log(`üè¶ ${entry}`);
            this.addToDailyTotal(amount);
        }
        else if (this.getBalance() > 0) {
            // R√∫t ƒë·∫øn 0
            const all = this.getBalance();
            this.balance = 0;
            const entry = `Withdraw all: -${all}, Balance: 0`;
            this.history.push(entry);
            this.notifications.push(`üì© R√∫t to√†n b·ªô ${all} (v·ªÅ 0).`);
            console.log(`üè¶ ${entry}`);
            this.addToDailyTotal(all);
        }
        else {
            console.log("‚ùå Kh√¥ng th·ªÉ r√∫t, s·ªë d∆∞ ƒë√£ h·∫øt.");
            this.notifications.push("‚ùå R√∫t th·∫•t b·∫°i: s·ªë d∆∞ = 0.");
        }
    }
    calculateInterest() {
        return this.getBalance() * (this.interestRate / 100);
    }
}
/* ==========================================
   ƒê·ªÄ 1 + ƒê·ªÄ 4: CheckingAccount (th·∫•u chi + l√£i d∆∞∆°ng)
   - Cho √¢m t·ªõi overdraftLimit
   ==========================================*/
class CheckingAccount extends TransactionAccount {
    constructor(accountNumber, overdraftLimit, interestRate, dailyLimit) {
        super(accountNumber, dailyLimit);
        this.overdraftLimit = overdraftLimit;
        this.interestRate = interestRate;
    }
    withdraw(amount) {
        if (amount <= 0) {
            console.log("‚ùå S·ªë ti·ªÅn r√∫t ph·∫£i > 0.");
            return;
        }
        if (!this.canTransactToday(amount))
            return;
        const after = this.getBalance() - amount;
        if (after >= -this.overdraftLimit) {
            this.balance = after;
            const entry = `Withdraw: -${amount}, Balance: ${after}`;
            this.history.push(entry);
            this.notifications.push(`üì© R√∫t ${amount} th√†nh c√¥ng.`);
            console.log(`üè¶ ${entry}`);
            this.addToDailyTotal(amount);
        }
        else {
            const msg = `Kh√¥ng th·ªÉ r√∫t ${amount}. V∆∞·ª£t qu√° th·∫•u chi (${this.overdraftLimit}).`;
            console.log(`‚ùå ${msg}`);
            this.notifications.push(`‚ùå ${msg}`);
        }
    }
    calculateInterest() {
        return this.getBalance() > 0 ? this.getBalance() * (this.interestRate / 100) : 0;
    }
}
/* =====================================================
   ƒê·ªÄ 5: Li√™n k·∫øt User ‚Üî Nhi·ªÅu t√†i kho·∫£n + Ki·ªÉm so√°t truy c·∫≠p
   =====================================================*/
class UserBankProfile {
    constructor(user) {
        this.user = user;
        this.accounts = new Map();
    }
    addAccount(acc) {
        this.accounts.set(acc.accountNumber, acc);
        console.log(`üÜï G·∫Øn t√†i kho·∫£n ${acc.accountNumber} cho user ${this.user.userName}.`);
    }
    canOperate() {
        if (this.user.status === "banned") {
            console.log(`‚õî User ${this.user.userName} b·ªã kh√≥a, kh√¥ng th·ªÉ giao d·ªãch.`);
            return false;
        }
        if (!this.user.isLogin) {
            console.log(`üîê User ${this.user.userName} ch∆∞a ƒëƒÉng nh·∫≠p.`);
            return false;
        }
        return true;
    }
    deposit(accountNumber, amount) {
        if (!this.canOperate())
            return;
        const acc = this.accounts.get(accountNumber);
        if (!acc) {
            console.log(`‚ùì Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ${accountNumber}.`);
            return;
        }
        acc.deposit(amount);
    }
    withdraw(accountNumber, amount) {
        if (!this.canOperate())
            return;
        const acc = this.accounts.get(accountNumber);
        if (!acc) {
            console.log(`‚ùì Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n ${accountNumber}.`);
            return;
        }
        acc.withdraw(amount);
    }
    showAllHistories() {
        for (const acc of this.accounts.values())
            acc.showHistoryDetailed();
    }
    showAllNotifications() {
        for (const acc of this.accounts.values())
            acc.showNotifications();
    }
}
/* =====================================================
   (Ti·ªán √≠ch) In divider cho ƒë·∫πp m·∫Øt khi ch·∫°y test
   =====================================================*/
function divider(title) {
    console.log("\n" + "‚îÄ".repeat(16) + " " + title + " " + "‚îÄ".repeat(16));
}
/* =====================================================
   TEST CASE T·ªîNG H·ª¢P (ƒë√∫ng flow b·∫°n y√™u c·∫ßu)
   =====================================================*/
(function main() {
    divider("KH·ªûI T·∫†O ADMIN & USER (ƒê·ªÅ 2)");
    const admin = new AdminAccount(99, "admin", "adminpass");
    const user = new UserAccount(1, "linh", "123456");
    divider("ƒêƒÇNG NH·∫¨P USER (ƒê·ªÅ 2)");
    user.login("123456"); // ƒë√∫ng m·∫≠t kh·∫©u
    divider("M·ªû HAI T√ÄI KHO·∫¢N + GI·ªöI H·∫†N NG√ÄY (ƒê·ªÅ 1,3,6,8)");
    // Saving: l√£i 5%, limit/ng√†y = 1000
    const sa = new SavingAccount("SA-001", 5, 1000);
    // Checking: th·∫•u chi 300, l√£i d∆∞∆°ng 2%, limit/ng√†y = 1000
    const ca = new CheckingAccount("CA-001", 300, 2, 1000);
    divider("LI√äN K·∫æT USER ‚Üî ACCOUNT (ƒê·ªÅ 5)");
    const profile = new UserBankProfile(user);
    profile.addAccount(sa);
    profile.addAccount(ca);
    divider("N·∫†P/R√öT + T√çNH L√ÉI (ƒê·ªÅ 1,3,4)");
    profile.deposit("SA-001", 800); // ok
    profile.withdraw("SA-001", 300); // ok
    console.log(`üíπ L√£i SA hi·ªán t·∫°i: ${sa.calculateInterest()}`);
    profile.deposit("CA-001", 200); // ok
    profile.withdraw("CA-001", 450); // th·∫•u chi c√≤n trong h·∫°n m·ª©c
    console.log(`üíπ L√£i CA hi·ªán t·∫°i: ${ca.calculateInterest()}`);
    divider("TH·ª¨ V∆Ø·ª¢T GI·ªöI H·∫†N NG√ÄY (ƒê·ªÅ 8 + Th√¥ng b√°o ƒê·ªÅ 6)");
    // ƒê√£ ti√™u 800 + 300 + 200 + 450 = 1750 t·ªïng giao d·ªãch? (L∆∞u √Ω: limit √°p d·ª•ng theo t·ª´ng t√†i kho·∫£n)
    // M·ªói account c√≥ limit 1000/ng√†y ri√™ng bi·ªát.
    // Th·ª≠ ƒë·∫©y SA v∆∞·ª£t limit:
    profile.deposit("SA-001", 300); // c√≤n room (800+300+... vi·ªác t√≠nh limit theo acc: hi·ªán t·∫°i SA giao d·ªãch 800 + 300 = 1100 -> giao d·ªãch 300 n√†y c√≥ th·ªÉ b·ªã ch·∫∑n).
    // ƒê·ªÉ minh h·ªça r√µ r√†ng, th·ª≠ ti·∫øp:
    profile.deposit("SA-001", 500); // ch·∫Øc ch·∫Øn v∆∞·ª£t limit ng√†y c·ªßa SA
    profile.withdraw("CA-001", 700); // CA c≈©ng c√≥ limit 1000/ng√†y, th·ª≠ ƒë·ª•ng limit
    divider("XEM TH√îNG B√ÅO & L·ªäCH S·ª¨ (ƒê·ªÅ 6 + 3)");
    profile.showAllNotifications();
    profile.showAllHistories();
    divider("ADMIN KH√ìA USER (ƒê·ªÅ 2 & 7 tinh th·∫ßn ph√¢n quy·ªÅn)");
    admin.banUser(user);
    divider("TH·ª¨ GIAO D·ªäCH SAU KHI B·ªä KH√ìA (ƒê·ªÅ 5 ki·ªÉm so√°t)");
    profile.deposit("CA-001", 50); // b·ªã ch·∫∑n v√¨ user b·ªã ban
    user.logout();
    divider("B√ÅO C√ÅO NHANH CU·ªêI NG√ÄY");
    sa.getLastReport();
    ca.getLastReport();
})();
