// =======================
// L·ªõp Room - Ph√≤ng kh√°ch s·∫°n
// =======================
class Room {
    constructor(id, type, // ƒê∆°n, ƒê√¥i, Suite
    price) {
        this.id = id;
        this.type = type;
        this.price = price;
        this.status = "available"; // available | booked
    }
    // ƒê·∫∑t ph√≤ng n·∫øu c√≤n tr·ªëng
    bookRoom() {
        if (this.status === "available") {
            this.status = "booked";
            return true;
        }
        return false;
    }
    // H·ªßy ph√≤ng
    cancelBooking() {
        if (this.status === "booked") {
            this.status = "available";
            return true;
        }
        return false;
    }
}
// =======================
// L·ªõp Customer - Kh√°ch h√†ng
// =======================
class Customer {
    constructor(id, name) {
        this.id = id;
        this.name = name;
        this.bookedRooms = [];
    }
    // ƒê·∫∑t ph√≤ng
    book(room) {
        if (room.bookRoom()) {
            this.bookedRooms.push(room);
            console.log(`‚úÖ ${this.name} ƒë√£ ƒë·∫∑t ph√≤ng ${room.type} (ID: ${room.id})`);
            return true;
        }
        console.log(`‚ùå Ph√≤ng ${room.type} (ID: ${room.id}) ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t`);
        return false;
    }
    // H·ªßy ph√≤ng
    cancel(room) {
        const index = this.bookedRooms.indexOf(room);
        if (index !== -1 && room.cancelBooking()) {
            this.bookedRooms.splice(index, 1);
            console.log(`üóëÔ∏è ${this.name} ƒë√£ h·ªßy ph√≤ng ${room.type} (ID: ${room.id})`);
            return true;
        }
        console.log(`‚ùå ${this.name} kh√¥ng c√≥ ph√≤ng n√†y ƒë·ªÉ h·ªßy`);
        return false;
    }
}
// =======================
// L·ªõp Booking - ƒê·∫∑t ph√≤ng
// =======================
class Booking {
    constructor(id, customerId, roomId, checkInDate, checkOutDate) {
        this.id = id;
        this.customerId = customerId;
        this.roomId = roomId;
        this.checkInDate = checkInDate;
        this.checkOutDate = checkOutDate;
    }
    // K√©o d√†i th·ªùi gian ƒë·∫∑t ph√≤ng
    extendBooking(days) {
        const newCheckOut = new Date(this.checkOutDate);
        newCheckOut.setDate(newCheckOut.getDate() + days);
        this.checkOutDate = newCheckOut;
        console.log(`‚è© Booking ${this.id} ƒë√£ ƒë∆∞·ª£c k√©o d√†i ${days} ng√†y`);
    }
}
// =======================
// L·ªõp Hotel - Qu·∫£n l√Ω kh√°ch s·∫°n
// =======================
class Hotel {
    constructor() {
        this.rooms = [];
        this.customers = [];
        this.bookings = [];
    }
    // Th√™m ph√≤ng
    addRoom(room) {
        this.rooms.push(room);
        console.log(`üè® ƒê√£ th√™m ph√≤ng ${room.type} (ID: ${room.id}, Gi√°: ${room.price})`);
    }
    // X√≥a ph√≤ng
    removeRoom(roomId) {
        this.rooms = this.rooms.filter(r => r.id !== roomId);
        console.log(`üóëÔ∏è ƒê√£ x√≥a ph√≤ng ID ${roomId}`);
    }
    // Th√™m kh√°ch h√†ng
    addCustomer(customer) {
        this.customers.push(customer);
        console.log(`üë§ ƒê√£ th√™m kh√°ch h√†ng ${customer.name}`);
    }
    // T√¨m ph√≤ng theo lo·∫°i
    findRoomByType(type) {
        return this.rooms.filter(r => r.type.toLowerCase().includes(type.toLowerCase()));
    }
    // T√¨m ph√≤ng theo gi√° <= maxPrice
    findRoomByPrice(maxPrice) {
        return this.rooms.filter(r => r.price <= maxPrice);
    }
    // ƒê·∫∑t ph√≤ng cho kh√°ch
    bookRoom(customerId, roomId, checkIn, checkOut) {
        const customer = this.customers.find(c => c.id === customerId);
        const room = this.rooms.find(r => r.id === roomId);
        if (customer && room && customer.book(room)) {
            const booking = new Booking(this.bookings.length + 1, customerId, roomId, checkIn, checkOut);
            this.bookings.push(booking);
        }
    }
    // H·ªßy ph√≤ng
    cancelBooking(customerId, roomId) {
        const customer = this.customers.find(c => c.id === customerId);
        const room = this.rooms.find(r => r.id === roomId);
        if (customer && room && customer.cancel(room)) {
            this.bookings = this.bookings.filter(b => !(b.customerId === customerId && b.roomId === roomId));
        }
    }
    // K√©o d√†i booking
    extendBooking(bookingId, days) {
        const booking = this.bookings.find(b => b.id === bookingId);
        if (booking)
            booking.extendBooking(days);
    }
    // Th·ªëng k√™
    stats() {
        const totalRooms = this.rooms.length;
        const booked = this.rooms.filter(r => r.status === "booked").length;
        const available = totalRooms - booked;
        const revenue = this.rooms.filter(r => r.status === "booked").reduce((sum, r) => sum + r.price, 0);
        console.log("üìä Th·ªëng k√™ kh√°ch s·∫°n:");
        console.log(`- T·ªïng s·ªë ph√≤ng: ${totalRooms}`);
        console.log(`- Ph√≤ng ƒë√£ ƒë·∫∑t: ${booked}`);
        console.log(`- Ph√≤ng c√≤n tr·ªëng: ${available}`);
        console.log(`- Doanh thu hi·ªán t·∫°i: ${revenue}`);
    }
}
// =======================
// Demo s·ª≠ d·ª•ng
// =======================
const hotel = new Hotel();
// Th√™m ph√≤ng
hotel.addRoom(new Room(1, "ƒê∆°n", 500000));
hotel.addRoom(new Room(2, "ƒê√¥i", 800000));
hotel.addRoom(new Room(3, "Suite", 1500000));
// Th√™m kh√°ch h√†ng
hotel.addCustomer(new Customer(1, "Nguy·ªÖn VƒÉn A"));
hotel.addCustomer(new Customer(2, "Tr·∫ßn Th·ªã B"));
// ƒê·∫∑t ph√≤ng
hotel.bookRoom(1, 1, new Date("2025-08-14"), new Date("2025-08-16"));
hotel.bookRoom(2, 2, new Date("2025-08-15"), new Date("2025-08-18"));
// K√©o d√†i booking
hotel.extendBooking(1, 2);
// H·ªßy booking
hotel.cancelBooking(2, 2);
// Th·ªëng k√™
hotel.stats();
// T√¨m ph√≤ng theo lo·∫°i
console.log("üîç T√¨m ph√≤ng lo·∫°i 'Suite':", hotel.findRoomByType("Suite"));
// T√¨m ph√≤ng theo gi√° <= 800000
console.log("üîç T√¨m ph√≤ng gi√° <= 800000:", hotel.findRoomByPrice(800000));
