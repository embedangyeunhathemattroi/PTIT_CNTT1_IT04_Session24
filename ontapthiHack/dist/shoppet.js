// pet-store.ts
// Ch·∫°y: tsc pet-store.ts && node pet-store.js
// =============================
// Class Pet
// =============================
class Pet {
    constructor(id, name, type, age, price, status // "C√≤n h√†ng" | "ƒê√£ b√°n"
    ) {
        this.id = id;
        this.name = name;
        this.type = type;
        this.age = age;
        this.price = price;
        this.status = status;
    }
    displayInfo() {
        console.log(`ID: ${this.id} | T√™n: ${this.name} | Lo·∫°i: ${this.type} | Tu·ªïi: ${this.age} | Gi√°: ${this.price} | T√¨nh tr·∫°ng: ${this.status}`);
    }
}
// =============================
// Class Customer
// =============================
class Customer {
    constructor(id, name, phone, purchaseHistory = []) {
        this.id = id;
        this.name = name;
        this.phone = phone;
        this.purchaseHistory = purchaseHistory;
    }
    displayInfo() {
        console.log(`ID: ${this.id} | T√™n: ${this.name} | SƒêT: ${this.phone}`);
        console.log("L·ªãch s·ª≠ mua:");
        if (this.purchaseHistory.length === 0) {
            console.log(" - Ch∆∞a mua th√∫ c∆∞ng n√†o");
        }
        else {
            this.purchaseHistory.forEach((petId) => {
                console.log(` - M√£ th√∫: ${petId}`);
            });
        }
    }
}
// =============================
// Class PetStore
// =============================
class PetStore {
    constructor() {
        this.pets = [];
        this.customers = [];
    }
    // Th√™m th√∫ c∆∞ng m·ªõi (id kh√¥ng tr√πng)
    addPet(pet) {
        if (this.pets.some(p => p.id === pet.id)) {
            console.log(`‚ùå Th√∫ c∆∞ng ID ${pet.id} ƒë√£ t·ªìn t·∫°i.`);
            return;
        }
        this.pets.push(pet);
        console.log(`‚úÖ ƒê√£ th√™m th√∫ c∆∞ng ${pet.name}.`);
    }
    // Hi·ªÉn th·ªã t·∫•t c·∫£ th√∫ c∆∞ng
    showAllPets() {
        console.log("\nüìã Danh s√°ch th√∫ c∆∞ng:");
        this.pets.forEach(p => p.displayInfo());
    }
    // T√¨m ki·∫øm th√∫ c∆∞ng theo lo·∫°i
    searchPetsByType(type) {
        const found = this.pets.filter(p => p.type.toLowerCase() === type.toLowerCase());
        if (found.length === 0) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y th√∫ lo·∫°i '${type}'.`);
            return;
        }
        console.log(`üìã K·∫øt qu·∫£ t√¨m ki·∫øm th√∫ lo·∫°i '${type}':`);
        found.forEach(p => p.displayInfo());
    }
    // S·∫Øp x·∫øp th√∫ c∆∞ng theo gi√°
    sortPetsByPrice(asc = true) {
        this.pets.sort((a, b) => asc ? a.price - b.price : b.price - a.price);
        console.log(`üìã Danh s√°ch th√∫ c∆∞ng ƒë√£ s·∫Øp x·∫øp theo gi√° ${asc ? "tƒÉng" : "gi·∫£m"}:`);
        this.showAllPets();
    }
    // B√°n th√∫ c∆∞ng
    sellPet(petId, customerId) {
        const pet = this.pets.find(p => p.id === petId);
        const customer = this.customers.find(c => c.id === customerId);
        if (!pet) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y th√∫ c∆∞ng ID ${petId}.`);
            return;
        }
        if (pet.status === "ƒê√£ b√°n") {
            console.log(`‚ùå Th√∫ c∆∞ng ID ${petId} ƒë√£ ƒë∆∞·ª£c b√°n.`);
            return;
        }
        if (!customer) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng ID ${customerId}.`);
            return;
        }
        pet.status = "ƒê√£ b√°n";
        customer.purchaseHistory.push(pet.id);
        console.log(`‚úÖ ƒê√£ b√°n th√∫ ${pet.name} cho kh√°ch ${customer.name}.`);
    }
    // Th√™m kh√°ch h√†ng m·ªõi
    addCustomer(customer) {
        if (this.customers.some(c => c.id === customer.id)) {
            console.log(`‚ùå Kh√°ch h√†ng ID ${customer.id} ƒë√£ t·ªìn t·∫°i.`);
            return;
        }
        this.customers.push(customer);
        console.log(`‚úÖ ƒê√£ th√™m kh√°ch h√†ng ${customer.name}.`);
    }
    // Hi·ªÉn th·ªã t·∫•t c·∫£ kh√°ch h√†ng
    showAllCustomers() {
        console.log("\nüìã Danh s√°ch kh√°ch h√†ng:");
        this.customers.forEach(c => c.displayInfo());
    }
    // T√¨m kh√°ch h√†ng theo t√™n ho·∫∑c s·ªë ƒëi·ªán tho·∫°i
    searchCustomer(keyword) {
        const found = this.customers.filter(c => c.name.toLowerCase().includes(keyword.toLowerCase()) || c.phone.includes(keyword));
        if (found.length === 0) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng '${keyword}'.`);
            return;
        }
        console.log(`üìã K·∫øt qu·∫£ t√¨m ki·∫øm kh√°ch h√†ng '${keyword}':`);
        found.forEach(c => c.displayInfo());
    }
    // Th·ªëng k√™
    statistics() {
        const availableCount = this.pets.filter(p => p.status === "C√≤n h√†ng").length;
        const soldPets = this.pets.filter(p => p.status === "ƒê√£ b√°n");
        const soldCount = soldPets.length;
        const revenue = soldPets.reduce((sum, pet) => sum + pet.price, 0);
        console.log("\nüìä Th·ªëng k√™:");
        console.log(`- S·ªë th√∫ c√≤n h√†ng: ${availableCount}`);
        console.log(`- S·ªë th√∫ ƒë√£ b√°n: ${soldCount}`);
        console.log(`- Doanh thu: ${revenue}`);
    }
}
// =============================
// Demo ch·ª©c nƒÉng
// =============================
const store = new PetStore();
// Th√™m th√∫ c∆∞ng
store.addPet(new Pet("P001", "Milu", "Ch√≥", 2, 3000, "C√≤n h√†ng"));
store.addPet(new Pet("P002", "Tom", "M√®o", 1, 2000, "C√≤n h√†ng"));
store.addPet(new Pet("P003", "Jerry", "Chim", 1, 500, "C√≤n h√†ng"));
// Hi·ªÉn th·ªã th√∫ c∆∞ng
store.showAllPets();
// T√¨m ki·∫øm theo lo·∫°i
store.searchPetsByType("M√®o");
// S·∫Øp x·∫øp th√∫ c∆∞ng theo gi√° gi·∫£m d·∫ßn
store.sortPetsByPrice(false);
// Th√™m kh√°ch h√†ng
store.addCustomer(new Customer("C001", "Nguy·ªÖn VƒÉn A", "0901234567"));
store.addCustomer(new Customer("C002", "Tr·∫ßn Th·ªã B", "0912345678"));
// B√°n th√∫ c∆∞ng
store.sellPet("P002", "C001");
// Hi·ªÉn th·ªã kh√°ch h√†ng
store.showAllCustomers();
// T√¨m kh√°ch h√†ng
store.searchCustomer("Nguy·ªÖn");
// Th·ªëng k√™
store.statistics();
